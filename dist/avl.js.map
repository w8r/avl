{"version":3,"file":"avl.js","sources":["../src/utils.js","../src/index.js"],"sourcesContent":["\n/**\n * Prints tree horizontally\n * @param  {Node}                       root\n * @param  {Function(node:Node):String} [printNode]\n * @return {String}\n */\nexport function print (root, printNode = (n) => n.key) {\n  var out = [];\n  row(root, '', true, (v) => out.push(v), printNode);\n  return out.join('');\n}\n\n/**\n * Prints level of the tree\n * @param  {Node}                        root\n * @param  {String}                      prefix\n * @param  {Boolean}                     isTail\n * @param  {Function(in:string):void}    out\n * @param  {Function(node:Node):String}  printNode\n */\nfunction row (root, prefix, isTail, out, printNode) {\n  if (root) {\n    out(`${ prefix }${ isTail ? '└── ' : '├── ' }${ printNode(root) }\\n`);\n    const indent = prefix + (isTail ? '    ' : '│   ');\n    if (root.left)  row(root.left,  indent, false, out, printNode);\n    if (root.right) row(root.right, indent, true,  out, printNode);\n  }\n}\n\n\n/**\n * Is the tree balanced (none of the subtrees differ in height by more than 1)\n * @param  {Node}    root\n * @return {Boolean}\n */\nexport function isBalanced(root) {\n  if (root === null) return true; // If node is empty then return true\n\n  // Get the height of left and right sub trees\n  var lh = height(root.left);\n  var rh = height(root.right);\n\n  if (Math.abs(lh - rh) <= 1 &&\n      isBalanced(root.left)  &&\n      isBalanced(root.right)) return true;\n\n  // If we reach here then tree is not height-balanced\n  return false;\n}\n\n/**\n * The function Compute the 'height' of a tree.\n * Height is the number of nodes along the longest path\n * from the root node down to the farthest leaf node.\n *\n * @param  {Node} node\n * @return {Number}\n */\nfunction height(node) {\n  return node ? (1 + Math.max(height(node.left), height(node.right))) : 0;\n}\n","import { print, isBalanced } from './utils';\n\n\n// function createNode (parent, left, right, height, key, data) {\n//   return { parent, left, right, balanceFactor: height, key, data };\n// }\n\n/**\n * @typedef {{\n *   parent:        Node|Null,\n *   left:          Node|Null,\n *   right:         Node|Null,\n *   balanceFactor: Number,\n *   key:           any,\n *   data:          object?\n * }} Node\n */\n\n/**\n * @typedef {*} Key\n */\n\n/**\n * Default comparison function\n * @param {*} a\n * @param {*} b\n */\nfunction DEFAULT_COMPARE (a, b) { return a > b ? 1 : a < b ? -1 : 0; }\n\n\n/**\n * Single left rotation\n * @param  {Node} node\n * @return {Node}\n */\nfunction rotateLeft (node) {\n  var rightNode = node.right;\n  node.right    = rightNode.left;\n\n  if (rightNode.left) rightNode.left.parent = node;\n\n  rightNode.parent = node.parent;\n  if (rightNode.parent) {\n    if (rightNode.parent.left === node) {\n      rightNode.parent.left = rightNode;\n    } else {\n      rightNode.parent.right = rightNode;\n    }\n  }\n\n  node.parent    = rightNode;\n  rightNode.left = node;\n\n  node.balanceFactor += 1;\n  if (rightNode.balanceFactor < 0) {\n    node.balanceFactor -= rightNode.balanceFactor;\n  }\n\n  rightNode.balanceFactor += 1;\n  if (node.balanceFactor > 0) {\n    rightNode.balanceFactor += node.balanceFactor;\n  }\n  return rightNode;\n}\n\n\nfunction rotateRight (node) {\n  var leftNode = node.left;\n  node.left = leftNode.right;\n  if (node.left) node.left.parent = node;\n\n  leftNode.parent = node.parent;\n  if (leftNode.parent) {\n    if (leftNode.parent.left === node) {\n      leftNode.parent.left = leftNode;\n    } else {\n      leftNode.parent.right = leftNode;\n    }\n  }\n\n  node.parent    = leftNode;\n  leftNode.right = node;\n\n  node.balanceFactor -= 1;\n  if (leftNode.balanceFactor > 0) {\n    node.balanceFactor -= leftNode.balanceFactor;\n  }\n\n  leftNode.balanceFactor -= 1;\n  if (node.balanceFactor < 0) {\n    leftNode.balanceFactor += node.balanceFactor;\n  }\n\n  return leftNode;\n}\n\n\n// function leftBalance (node) {\n//   if (node.left.balanceFactor === -1) rotateLeft(node.left);\n//   return rotateRight(node);\n// }\n\n\n// function rightBalance (node) {\n//   if (node.right.balanceFactor === 1) rotateRight(node.right);\n//   return rotateLeft(node);\n// }\n\n\nexport default class Tree {\n\n  /**\n   * @class AVLTree\n   * @constructor\n   * @param  {Function(a:Key, b:Key):Number} [comparator]\n   * @param  {Boolean}                       [noDuplicates=false] Disallow duplicates\n   */\n  constructor (comparator, noDuplicates = false) {\n    this._comparator = comparator || DEFAULT_COMPARE;\n    this._root = null;\n    this._size = 0;\n    this._noDuplicates = !!noDuplicates;\n  }\n\n\n  /**\n   * Clear the tree\n   */\n  destroy() {\n    this._root = null;\n  }\n\n  /**\n   * Number of nodes\n   * @return {Number}\n   */\n  get size () {\n    return this._size;\n  }\n\n\n  /**\n   * Whether the tree contains a node with the given key\n   * @param  {Key} key\n   * @return {Boolean}\n   */\n  contains (key) {\n    if (this._root)  {\n      var node       = this._root;\n      var comparator = this._comparator;\n      while (node)  {\n        var cmp = comparator(key, node.key);\n        if      (cmp === 0) return true;\n        else if (cmp < 0)   node = node.left;\n        else                node = node.right;\n      }\n    }\n    return false;\n  }\n\n\n  /* eslint-disable class-methods-use-this */\n\n  /**\n   * Successor node\n   * @param  {Node} node\n   * @return {Node|Null}\n   */\n  next (node) {\n    var successor = node;\n    if (successor) {\n      if (successor.right) {\n        successor = successor.right;\n        while (successor && successor.left) successor = successor.left;\n      } else {\n        successor = node.parent;\n        while (successor && successor.right === node) {\n          node = successor; successor = successor.parent;\n        }\n      }\n    }\n    return successor;\n  }\n\n\n  /**\n   * Predecessor node\n   * @param  {Node} node\n   * @return {Node|Null}\n   */\n  prev (node) {\n    var predecessor = node;\n    if (predecessor) {\n      if (predecessor.left) {\n        predecessor = predecessor.left;\n        while (predecessor && predecessor.right) predecessor = predecessor.right;\n      } else {\n        predecessor = node.parent;\n        while (predecessor && predecessor.left === node) {\n          node = predecessor;\n          predecessor = predecessor.parent;\n        }\n      }\n    }\n    return predecessor;\n  }\n  /* eslint-enable class-methods-use-this */\n\n\n  /**\n   * @param  {Function(node:Node):void} fn\n   * @return {AVLTree}\n   */\n  forEach(fn) {\n    var current = this._root;\n    var s = [], done = false, i = 0;\n\n    while (!done) {\n      // Reach the left most Node of the current Node\n      if (current) {\n        // Place pointer to a tree node on the stack\n        // before traversing the node's left subtree\n        s.push(current);\n        current = current.left;\n      } else {\n        // BackTrack from the empty subtree and visit the Node\n        // at the top of the stack; however, if the stack is\n        // empty you are done\n        if (s.length > 0) {\n          current = s.pop();\n          fn(current, i++);\n\n          // We have visited the node and its left\n          // subtree. Now, it's right subtree's turn\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return this;\n  }\n\n\n  /**\n   * Returns all keys in order\n   * @return {Array<Key>}\n   */\n  keys () {\n    var current = this._root;\n    var s = [], r = [], done = false;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          r.push(current.key);\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return r;\n  }\n\n\n  /**\n   * Returns `data` fields of all nodes in order.\n   * @return {Array<*>}\n   */\n  values () {\n    var current = this._root;\n    var s = [], r = [], done = false;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          r.push(current.data);\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return r;\n  }\n\n\n  at (index) {\n    index = index % this.size;\n    if (index < 0) index = this.size - index;\n\n    var current = this._root;\n    var s = [], done = false, i = 0;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          if (i === index) return current;\n          i++;\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return null;\n  }\n\n\n  /**\n   * Returns node with the minimum key\n   * @return {Node|Null}\n   */\n  minNode () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.left) node = node.left;\n    return node;\n  }\n\n\n  /**\n   * Returns node with the max key\n   * @return {Node|Null}\n   */\n  maxNode () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.right) node = node.right;\n    return node;\n  }\n\n\n  /**\n   * Min key\n   * @return {Key}\n   */\n  min () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.left) node = node.left;\n    return node.key;\n  }\n\n  /**\n   * Max key\n   * @return {Key|Null}\n   */\n  max () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.right) node = node.right;\n    return node.key;\n  }\n\n\n  /**\n   * @return {Boolean}\n   */\n  isEmpty() {\n    return !this._root;\n  }\n\n\n  /**\n   * Removes and returns the node with smallest key\n   * @return {Node|Null}\n   */\n  pop () {\n    var node = this._root, returnValue = null;\n    if (node) {\n      while (node.left) node = node.left;\n      returnValue = { key: node.key, data: node.data };\n      this.remove(node.key);\n    }\n    return returnValue;\n  }\n\n\n  /**\n   * Find node by key\n   * @param  {Key} key\n   * @return {Node|Null}\n   */\n  find (key) {\n    var root = this._root;\n    if (root === null)    return null;\n    if (key === root.key) return root;\n\n    var subtree = root, cmp;\n    var compare = this._comparator;\n    while (subtree) {\n      cmp = compare(key, subtree.key);\n      if      (cmp === 0) return subtree;\n      else if (cmp < 0)   subtree = subtree.left;\n      else                subtree = subtree.right;\n    }\n\n    return null;\n  }\n\n\n  /**\n   * Insert a node into the tree\n   * @param  {Key} key\n   * @param  {*}   [data]\n   * @return {Node|Null}\n   */\n  insert (key, data) {\n    if (!this._root) {\n      this._root = {\n        parent: null, left: null, right: null, balanceFactor: 0,\n        key, data\n      };\n      this._size++;\n      return this._root;\n    }\n\n    var compare = this._comparator;\n    var node    = this._root;\n    var parent  = null;\n    var cmp     = 0;\n\n    if (this._noDuplicates) {\n      while (node) {\n        cmp = compare(key, node.key);\n        parent = node;\n        if      (cmp === 0) return null;\n        else if (cmp < 0)   node = node.left;\n        else                node = node.right;\n      }\n    } else {\n      while (node) {\n        cmp = compare(key, node.key);\n        parent = node;\n        if      (cmp <= 0)  node = node.left; //return null;\n        else                node = node.right;\n      }\n    }\n\n    var newNode = {\n      left: null, right: null, balanceFactor: 0,\n      parent, key, data\n    };\n    if (cmp <= 0) parent.left  = newNode;\n    else         parent.right = newNode;\n\n    while (parent) {\n      cmp = compare(parent.key, key);\n      if (cmp < 0) parent.balanceFactor -= 1;\n      else         parent.balanceFactor += 1;\n\n      if        (parent.balanceFactor === 0) break;\n      else if   (parent.balanceFactor < -1) {\n        //let newRoot = rightBalance(parent);\n        if (parent.right.balanceFactor === 1) rotateRight(parent.right);\n        let newRoot = rotateLeft(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        break;\n      } else if (parent.balanceFactor > 1) {\n        // let newRoot = leftBalance(parent);\n        if (parent.left.balanceFactor === -1) rotateLeft(parent.left);\n        let newRoot = rotateRight(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        break;\n      }\n      parent = parent.parent;\n    }\n\n    this._size++;\n    return newNode;\n  }\n\n\n  /**\n   * Removes the node from the tree. If not found, returns null.\n   * @param  {Key} key\n   * @return {Node:Null}\n   */\n  remove (key) {\n    if (!this._root) return null;\n\n    var node = this._root;\n    var compare = this._comparator;\n\n    while (node) {\n      var cmp = compare(key, node.key);\n      if      (cmp === 0) break;\n      else if (cmp < 0)   node = node.left;\n      else                node = node.right;\n    }\n    if (!node) return null;\n    var returnValue = node.key;\n\n    if (node.left) {\n      var max = node.left;\n\n      while (max.left || max.right) {\n        while (max.right) max = max.right;\n\n        node.key = max.key;\n        node.data = max.data;\n        if (max.left) {\n          node = max;\n          max = max.left;\n        }\n      }\n\n      node.key  = max.key;\n      node.data = max.data;\n      node = max;\n    }\n\n    if (node.right) {\n      var min = node.right;\n\n      while (min.left || min.right) {\n        while (min.left) min = min.left;\n\n        node.key  = min.key;\n        node.data = min.data;\n        if (min.right) {\n          node = min;\n          min = min.right;\n        }\n      }\n\n      node.key  = min.key;\n      node.data = min.data;\n      node = min;\n    }\n\n    var parent = node.parent;\n    var pp     = node;\n\n    while (parent) {\n      if (parent.left === pp) parent.balanceFactor -= 1;\n      else                    parent.balanceFactor += 1;\n\n      if        (parent.balanceFactor < -1) {\n        //let newRoot = rightBalance(parent);\n        if (parent.right.balanceFactor === 1) rotateRight(parent.right);\n        let newRoot = rotateLeft(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        parent = newRoot;\n      } else if (parent.balanceFactor > 1) {\n        // let newRoot = leftBalance(parent);\n        if (parent.left.balanceFactor === -1) rotateLeft(parent.left);\n        let newRoot = rotateRight(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        parent = newRoot;\n      }\n\n      if (parent.balanceFactor === -1 || parent.balanceFactor === 1) break;\n\n      pp     = parent;\n      parent = parent.parent;\n    }\n\n    if (node.parent) {\n      if (node.parent.left === node) node.parent.left  = null;\n      else                           node.parent.right = null;\n    }\n\n    if (node === this._root) this._root = null;\n\n    this._size--;\n    return returnValue;\n  }\n\n\n  /**\n   * Bulk-load items\n   * @param  {Array}  keys\n   * @param  {Array}  [values]\n   * @return {Tree}\n   */\n  load(keys = [], values = []) {\n    if (Array.isArray(keys)) {\n      for (var i = 0, len = keys.length; i < len; i++) {\n        this.insert(keys[i], values[i]);\n      }\n    }\n    return this;\n  }\n\n\n  /**\n   * Returns true if the tree is balanced\n   * @return {Boolean}\n   */\n  isBalanced() {\n    return isBalanced(this._root);\n  }\n\n\n  /**\n   * String representation of the tree - primitive horizontal print-out\n   * @param  {Function(Node):String} [printNode]\n   * @return {String}\n   */\n  toString (printNode) {\n    return print(this._root, printNode);\n  }\n\n}\n\n"],"names":["const","this","newRoot"],"mappings":"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"}