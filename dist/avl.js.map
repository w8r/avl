{"version":3,"file":"avl.js","sources":["../src/utils.js","../src/index.js"],"sourcesContent":["\n/**\n * Prints tree horizontally\n * @param  {Node}                       root\n * @param  {Function(node:Node):String} [printNode]\n * @return {String}\n */\nexport function print (root, printNode = (n) => n.key) {\n  var out = [];\n  row(root, '', true, (v) => out.push(v), printNode);\n  return out.join('');\n}\n\n/**\n * Prints level of the tree\n * @param  {Node}                        root\n * @param  {String}                      prefix\n * @param  {Boolean}                     isTail\n * @param  {Function(in:string):void}    out\n * @param  {Function(node:Node):String}  printNode\n */\nfunction row (root, prefix, isTail, out, printNode) {\n  if (root) {\n    out(`${ prefix }${ isTail ? '└── ' : '├── ' }${ printNode(root) }\\n`);\n    const indent = prefix + (isTail ? '    ' : '│   ');\n    if (root.left)  row(root.left,  indent, false, out, printNode);\n    if (root.right) row(root.right, indent, true,  out, printNode);\n  }\n}\n\n\n/**\n * Is the tree balanced (none of the subtrees differ in height by more than 1)\n * @param  {Node}    root\n * @return {Boolean}\n */\nexport function isBalanced(root) {\n  if (root === null) return true; // If node is empty then return true\n\n  // Get the height of left and right sub trees\n  var lh = height(root.left);\n  var rh = height(root.right);\n\n  if (Math.abs(lh - rh) <= 1 &&\n      isBalanced(root.left)  &&\n      isBalanced(root.right)) return true;\n\n  // If we reach here then tree is not height-balanced\n  return false;\n}\n\n/**\n * The function Compute the 'height' of a tree.\n * Height is the number of nodes along the longest path\n * from the root node down to the farthest leaf node.\n *\n * @param  {Node} node\n * @return {Number}\n */\nfunction height(node) {\n  return node ? (1 + Math.max(height(node.left), height(node.right))) : 0;\n}\n\n\nexport function loadRecursive (parent, keys, values, start, end) {\n  const size = end - start;\n  if (size > 0) {\n    const middle = start + Math.floor(size / 2);\n    const key    = keys[middle];\n    const data   = values[middle];\n    const node   = { key, data, parent };\n    node.left    = loadRecursive(node, keys, values, start, middle);\n    node.right   = loadRecursive(node, keys, values, middle + 1, end);\n    return node;\n  }\n  return null;\n}\n\n\nexport function markBalance(node) {\n  if (node === null) return 0;\n  const lh = markBalance(node.left);\n  const rh = markBalance(node.right);\n\n  node.balanceFactor = lh - rh;\n  return Math.max(lh, rh) + 1;\n}\n\n\nexport function sort(keys, values, left, right, compare) {\n  if (left >= right) return;\n\n  // eslint-disable-next-line no-bitwise\n  const pivot = keys[(left + right) >> 1];\n  let i = left - 1;\n  let j = right + 1;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    do i++; while (compare(keys[i], pivot) < 0);\n    do j--; while (compare(keys[j], pivot) > 0);\n    if (i >= j) break;\n\n    let tmp = keys[i];\n    keys[i] = keys[j];\n    keys[j] = tmp;\n\n    tmp = values[i];\n    values[i] = values[j];\n    values[j] = tmp;\n  }\n\n  sort(keys, values,  left,     j, compare);\n  sort(keys, values, j + 1, right, compare);\n}\n\nexport async function whilst (next, iteratee) {\n  let i = 0, n;\n  // eslint-disable-next-line no-cond-assign\n  while ((n = next()) !== undefined) {\n    // eslint-disable-next-line no-await-in-loop\n    await iteratee(n, i++);\n  }\n}\n","import { print, isBalanced, loadRecursive, markBalance, sort, whilst } from './utils';\n\n\n// function createNode (parent, left, right, height, key, data) {\n//   return { parent, left, right, balanceFactor: height, key, data };\n// }\n\n/**\n * @typedef {{\n *   parent:        ?Node,\n *   left:          ?Node,\n *   right:         ?Node,\n *   balanceFactor: number,\n *   key:           Key,\n *   data:          Value\n * }} Node\n */\n\n/**\n * @typedef {*} Key\n */\n\n/**\n * @typedef {*} Value\n */\n\n/**\n * Default comparison function\n * @param {Key} a\n * @param {Key} b\n * @returns {number}\n */\nfunction DEFAULT_COMPARE (a, b) { return a > b ? 1 : a < b ? -1 : 0; }\n\n\n/**\n * Single left rotation\n * @param  {Node} node\n * @return {Node}\n */\nfunction rotateLeft (node) {\n  var rightNode = node.right;\n  node.right    = rightNode.left;\n\n  if (rightNode.left) rightNode.left.parent = node;\n\n  rightNode.parent = node.parent;\n  if (rightNode.parent) {\n    if (rightNode.parent.left === node) {\n      rightNode.parent.left = rightNode;\n    } else {\n      rightNode.parent.right = rightNode;\n    }\n  }\n\n  node.parent    = rightNode;\n  rightNode.left = node;\n\n  node.balanceFactor += 1;\n  if (rightNode.balanceFactor < 0) {\n    node.balanceFactor -= rightNode.balanceFactor;\n  }\n\n  rightNode.balanceFactor += 1;\n  if (node.balanceFactor > 0) {\n    rightNode.balanceFactor += node.balanceFactor;\n  }\n  return rightNode;\n}\n\n\nfunction rotateRight (node) {\n  var leftNode = node.left;\n  node.left = leftNode.right;\n  if (node.left) node.left.parent = node;\n\n  leftNode.parent = node.parent;\n  if (leftNode.parent) {\n    if (leftNode.parent.left === node) {\n      leftNode.parent.left = leftNode;\n    } else {\n      leftNode.parent.right = leftNode;\n    }\n  }\n\n  node.parent    = leftNode;\n  leftNode.right = node;\n\n  node.balanceFactor -= 1;\n  if (leftNode.balanceFactor > 0) {\n    node.balanceFactor -= leftNode.balanceFactor;\n  }\n\n  leftNode.balanceFactor -= 1;\n  if (node.balanceFactor < 0) {\n    leftNode.balanceFactor += node.balanceFactor;\n  }\n\n  return leftNode;\n}\n\n\n// function leftBalance (node) {\n//   if (node.left.balanceFactor === -1) rotateLeft(node.left);\n//   return rotateRight(node);\n// }\n\n\n// function rightBalance (node) {\n//   if (node.right.balanceFactor === 1) rotateRight(node.right);\n//   return rotateLeft(node);\n// }\n\n\nexport default class AVLTree {\n  /**\n   * Callback for comparator\n   * @callback comparatorCallback\n   * @param {Key} a\n   * @param {Key} b\n   * @returns {number}\n   */\n\n  /**\n   * @class AVLTree\n   * @constructor\n   * @param  {comparatorCallback} [comparator]\n   * @param  {boolean}            [noDuplicates=false] Disallow duplicates\n   */\n  constructor (comparator, noDuplicates = false) {\n    this._comparator = comparator || DEFAULT_COMPARE;\n    this._root = null;\n    this._size = 0;\n    this._noDuplicates = !!noDuplicates;\n  }\n\n\n  /**\n   * Clear the tree\n   * @return {AVLTree}\n   */\n  destroy() {\n    return this.clear();\n  }\n\n\n  /**\n   * Clear the tree\n   * @return {AVLTree}\n   */\n  clear() {\n    this._root = null;\n    this._size = 0;\n    return this;\n  }\n\n  /**\n   * Number of nodes\n   * @return {number}\n   */\n  get size () {\n    return this._size;\n  }\n\n\n  /**\n   * Whether the tree contains a node with the given key\n   * @param  {Key} key\n   * @return {boolean} true/false\n   */\n  contains (key) {\n    if (this._root)  {\n      var node       = this._root;\n      var comparator = this._comparator;\n      while (node)  {\n        var cmp = comparator(key, node.key);\n        if      (cmp === 0) return true;\n        else if (cmp < 0)   node = node.left;\n        else                node = node.right;\n      }\n    }\n    return false;\n  }\n\n\n  /* eslint-disable class-methods-use-this */\n\n  /**\n   * Successor node\n   * @param  {Node} node\n   * @return {?Node}\n   */\n  next (node) {\n    var successor = node;\n    if (successor) {\n      if (successor.right) {\n        successor = successor.right;\n        while (successor.left) successor = successor.left;\n      } else {\n        successor = node.parent;\n        while (successor && successor.right === node) {\n          node = successor; successor = successor.parent;\n        }\n      }\n    }\n    return successor;\n  }\n\n\n  /**\n   * Predecessor node\n   * @param  {Node} node\n   * @return {?Node}\n   */\n  prev (node) {\n    var predecessor = node;\n    if (predecessor) {\n      if (predecessor.left) {\n        predecessor = predecessor.left;\n        while (predecessor.right) predecessor = predecessor.right;\n      } else {\n        predecessor = node.parent;\n        while (predecessor && predecessor.left === node) {\n          node = predecessor;\n          predecessor = predecessor.parent;\n        }\n      }\n    }\n    return predecessor;\n  }\n  /* eslint-enable class-methods-use-this */\n\n\n  /**\n   * Callback for forEach\n   * @callback forEachCallback\n   * @param {Node} node\n   * @param {number} index\n   */\n\n  /**\n   * @param  {forEachCallback} callback\n   * @return {AVLTree}\n   */\n  forEach(callback) {\n    var current = this._root;\n    var s = [], done = false, i = 0;\n\n    while (!done) {\n      // Reach the left most Node of the current Node\n      if (current) {\n        // Place pointer to a tree node on the stack\n        // before traversing the node's left subtree\n        s.push(current);\n        current = current.left;\n      } else {\n        // BackTrack from the empty subtree and visit the Node\n        // at the top of the stack; however, if the stack is\n        // empty you are done\n        if (s.length > 0) {\n          current = s.pop();\n          callback(current, i++);\n\n          // We have visited the node and its left\n          // subtree. Now, it's right subtree's turn\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * @param  {forEachCallback} callback\n   * @return {Promise}\n   */\n  asyncForEach (callback) {\n    const minNode = this.minNode();\n    let node;\n    const next = this.next.bind(this);\n    const iterate = () => { node = node ? next(node) : minNode; return node; };\n    return whilst(iterate, callback);\n  }\n\n  asyncRange (low, high, fn, ctx) {\n    const lowNode = this.at(low);\n    const highNode = this.at(high);\n    let done = false;\n    let node;\n    const next = this.next.bind(this);\n\n    const callback = async function (node) {\n      done = await fn(node, ctx);\n    };\n\n    const iterate = () => {\n      if (done) {\n        return undefined;\n      }\n      if (node === highNode) {\n        return undefined;\n      } else if (node === undefined) {\n        node = lowNode;\n      } else {\n        node = next(node);\n      }\n      return node;\n    };\n    return whilst(iterate, callback);\n  }\n\n  /**\n   * Walk key range from `low` to `high`. Stops if `fn` returns a value.\n   * @param  {Key}      low\n   * @param  {Key}      high\n   * @param  {Function} fn\n   * @param  {*?}       ctx\n   * @return {SplayTree}\n   */\n  range(low, high, fn, ctx) {\n    const Q = [];\n    const compare = this._comparator;\n    let node = this._root, cmp;\n\n    while (Q.length !== 0 || node) {\n      if (node) {\n        Q.push(node);\n        node = node.left;\n      } else {\n        node = Q.pop();\n        cmp = compare(node.key, high);\n        if (cmp > 0) {\n          break;\n        } else if (compare(node.key, low) >= 0) {\n          if (fn.call(ctx, node)) return this; // stop if smth is returned\n        }\n        node = node.right;\n      }\n    }\n    return this;\n  }\n\n\n  /**\n   * Returns all keys in order\n   * @return {Array<Key>}\n   */\n  keys () {\n    var current = this._root;\n    var s = [], r = [], done = false;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          r.push(current.key);\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return r;\n  }\n\n\n  /**\n   * Returns `data` fields of all nodes in order.\n   * @return {Array<Value>}\n   */\n  values () {\n    var current = this._root;\n    var s = [], r = [], done = false;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          r.push(current.data);\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return r;\n  }\n\n\n  /**\n   * Returns node at given index\n   * @param  {number} index\n   * @return {?Node}\n   */\n  at (index) {\n    // removed after a consideration, more misleading than useful\n    // index = index % this.size;\n    // if (index < 0) index = this.size - index;\n\n    var current = this._root;\n    var s = [], done = false, i = 0;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          if (i === index) return current;\n          i++;\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return null;\n  }\n\n\n  /**\n   * Returns node with the minimum key\n   * @return {?Node}\n   */\n  minNode () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.left) node = node.left;\n    return node;\n  }\n\n\n  /**\n   * Returns node with the max key\n   * @return {?Node}\n   */\n  maxNode () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.right) node = node.right;\n    return node;\n  }\n\n\n  /**\n   * Min key\n   * @return {?Key}\n   */\n  min () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.left) node = node.left;\n    return node.key;\n  }\n\n\n  /**\n   * Max key\n   * @return {?Key}\n   */\n  max () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.right) node = node.right;\n    return node.key;\n  }\n\n\n  /**\n   * @return {boolean} true/false\n   */\n  isEmpty() {\n    return !this._root;\n  }\n\n\n  /**\n   * Removes and returns the node with smallest key\n   * @return {?Node}\n   */\n  pop () {\n    var node = this._root, returnValue = null;\n    if (node) {\n      while (node.left) node = node.left;\n      returnValue = { key: node.key, data: node.data };\n      this.remove(node.key);\n    }\n    return returnValue;\n  }\n\n\n  /**\n   * Removes and returns the node with highest key\n   * @return {?Node}\n   */\n  popMax () {\n    var node = this._root, returnValue = null;\n    if (node) {\n      while (node.right) node = node.right;\n      returnValue = { key: node.key, data: node.data };\n      this.remove(node.key);\n    }\n    return returnValue;\n  }\n\n\n  /**\n   * Find node by key\n   * @param  {Key} key\n   * @return {?Node}\n   */\n  find (key) {\n    var root = this._root;\n    // if (root === null)    return null;\n    // if (key === root.key) return root;\n\n    var subtree = root, cmp;\n    var compare = this._comparator;\n    while (subtree) {\n      cmp = compare(key, subtree.key);\n      if      (cmp === 0) return subtree;\n      else if (cmp < 0)   subtree = subtree.left;\n      else                subtree = subtree.right;\n    }\n\n    return null;\n  }\n\n\n  /**\n   * Insert a node into the tree\n   * @param  {Key} key\n   * @param  {Value} [data]\n   * @return {?Node}\n   */\n  insert (key, data) {\n    if (!this._root) {\n      this._root = {\n        parent: null, left: null, right: null, balanceFactor: 0,\n        key, data\n      };\n      this._size++;\n      return this._root;\n    }\n\n    var compare = this._comparator;\n    var node    = this._root;\n    var parent  = null;\n    var cmp     = 0;\n\n    if (this._noDuplicates) {\n      while (node) {\n        cmp = compare(key, node.key);\n        parent = node;\n        if      (cmp === 0) return null;\n        else if (cmp < 0)   node = node.left;\n        else                node = node.right;\n      }\n    } else {\n      while (node) {\n        cmp = compare(key, node.key);\n        parent = node;\n        if      (cmp <= 0)  node = node.left; //return null;\n        else                node = node.right;\n      }\n    }\n\n    var newNode = {\n      left: null,\n      right: null,\n      balanceFactor: 0,\n      parent, key, data\n    };\n    var newRoot;\n    if (cmp <= 0) parent.left  = newNode;\n    else         parent.right = newNode;\n\n    while (parent) {\n      cmp = compare(parent.key, key);\n      if (cmp < 0) parent.balanceFactor -= 1;\n      else         parent.balanceFactor += 1;\n\n      if        (parent.balanceFactor === 0) break;\n      else if   (parent.balanceFactor < -1) {\n        // inlined\n        //var newRoot = rightBalance(parent);\n        if (parent.right.balanceFactor === 1) rotateRight(parent.right);\n        newRoot = rotateLeft(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        break;\n      } else if (parent.balanceFactor > 1) {\n        // inlined\n        // var newRoot = leftBalance(parent);\n        if (parent.left.balanceFactor === -1) rotateLeft(parent.left);\n        newRoot = rotateRight(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        break;\n      }\n      parent = parent.parent;\n    }\n\n    this._size++;\n    return newNode;\n  }\n\n\n  /**\n   * Removes the node from the tree. If not found, returns null.\n   * @param  {Key} key\n   * @return {?Node}\n   */\n  remove (key) {\n    if (!this._root) return null;\n\n    var node = this._root;\n    var compare = this._comparator;\n    var cmp = 0;\n\n    while (node) {\n      cmp = compare(key, node.key);\n      if      (cmp === 0) break;\n      else if (cmp < 0)   node = node.left;\n      else                node = node.right;\n    }\n    if (!node) return null;\n\n    var returnValue = node.key;\n    var max, min;\n\n    if (node.left) {\n      max = node.left;\n\n      while (max.left || max.right) {\n        while (max.right) max = max.right;\n\n        node.key = max.key;\n        node.data = max.data;\n        if (max.left) {\n          node = max;\n          max = max.left;\n        }\n      }\n\n      node.key  = max.key;\n      node.data = max.data;\n      node = max;\n    }\n\n    if (node.right) {\n      min = node.right;\n\n      while (min.left || min.right) {\n        while (min.left) min = min.left;\n\n        node.key  = min.key;\n        node.data = min.data;\n        if (min.right) {\n          node = min;\n          min = min.right;\n        }\n      }\n\n      node.key  = min.key;\n      node.data = min.data;\n      node = min;\n    }\n\n    var parent = node.parent;\n    var pp     = node;\n    var newRoot;\n\n    while (parent) {\n      if (parent.left === pp) parent.balanceFactor -= 1;\n      else                    parent.balanceFactor += 1;\n\n      if        (parent.balanceFactor < -1) {\n        // inlined\n        //var newRoot = rightBalance(parent);\n        if (parent.right.balanceFactor === 1) rotateRight(parent.right);\n        newRoot = rotateLeft(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        parent = newRoot;\n      } else if (parent.balanceFactor > 1) {\n        // inlined\n        // var newRoot = leftBalance(parent);\n        if (parent.left.balanceFactor === -1) rotateLeft(parent.left);\n        newRoot = rotateRight(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        parent = newRoot;\n      }\n\n      if (parent.balanceFactor === -1 || parent.balanceFactor === 1) break;\n\n      pp     = parent;\n      parent = parent.parent;\n    }\n\n    if (node.parent) {\n      if (node.parent.left === node) node.parent.left  = null;\n      else                           node.parent.right = null;\n    }\n\n    if (node === this._root) this._root = null;\n\n    this._size--;\n    return returnValue;\n  }\n\n\n  /**\n   * Bulk-load items\n   * @param  {Array<Key>}  keys\n   * @param  {Array<Value>}  [values]\n   * @return {AVLTree}\n   */\n  load(keys = [], values = [], presort) {\n    if (this._size !== 0) throw new Error('bulk-load: tree is not empty');\n    const size = keys.length;\n    if (presort) sort(keys, values, 0, size - 1, this._comparator);\n    this._root = loadRecursive(null, keys, values, 0, size);\n    markBalance(this._root);\n    this._size = size;\n    return this;\n  }\n\n\n  /**\n   * Returns true if the tree is balanced\n   * @return {boolean}\n   */\n  isBalanced() {\n    return isBalanced(this._root);\n  }\n\n\n  /**\n   * String representation of the tree - primitive horizontal print-out\n   * @param  {Function(Node):string} [printNode]\n   * @return {string}\n   */\n  toString (printNode) {\n    return print(this._root, printNode);\n  }\n}\n\nAVLTree.default = AVLTree;\n"],"names":["const","let","this"],"mappings":"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"}