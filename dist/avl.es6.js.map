{"version":3,"file":"avl.es6.js","sources":["../src/node.js","../src/index.js"],"sourcesContent":["const { max } = Math;\n\nexport function node (key, value) {\n  return { left: null, right: null, height: null, key, value };\n}\n\n\nexport function leftHeight (node) {\n  return node.right ? node.right.height : -1;\n}\n\n\nexport function rightHeight (node) {\n  return node.left ? node.left.height : -1;\n}\n\n\n/**\n *   a                             b\n *  / \\                           / \\\n * c   b   -> rotate left a ->   a   e\n *    / \\                       / \\\n *   d   e                     c   d\n * @param  {node}\n * @return {node}\n */\nexport function rotateLeft (node) {\n  var other    = node.right;\n  node.right   = other.left;\n  other.left   = node;\n\n  node.height  = Math.max(leftHeight(node), rightHeight(node)) + 1;\n  other.height = Math.max(rightHeight(other), node.height) + 1;\n  return other;\n}\n\n\n/**\n *     b                          a\n *    / \\                        / \\\n *   a   e -> rotate right b -> c   b\n *  / \\                            / \\\n * c   d                          d   e\n * @param  {node}\n * @return {node}\n */\nexport function rotateRight (node) {\n  var other    = node.left;\n  node.left    = other.right;\n  other.right  = node;\n\n  node.height  = Math.max(leftHeight(node), rightHeight(node)) + 1;\n  other.height = Math.max(leftHeight(other), node.height) + 1;\n  return other;\n}\n","import {\n  node,\n  rotateLeft, rotateRight,\n  leftHeight, rightHeight\n} from './node';\n\n\nconst UNBALANCED_LEFT           = -2;\nconst SLIGHTLY_UNBALANCED_LEFT  = -1;\nconst UNBALANCED_RIGHT          =  2;\nconst SLIGHTLY_UNBALANCED_RIGHT =  1;\n\nconst DEFAULT_COMPARE = (a, b) => (a > b ? 1 : a < b ? -1 : 0);\n\n/**\n * @param  {node} node\n * @return {number}\n */\nconst balanceFactor = (node) => leftHeight(node) - rightHeight(node);\n\n\nexport default class AVL {\n\n  constructor (comparator = DEFAULT_COMPARE) {\n    this._root = null;\n    this._size = 0;\n    this._compare = comparator;\n  }\n\n  get size ()    { return this._size; }\n  get isEmpty () { return this._size === 0; }\n\n  /**\n   * @param {*} key\n   * @param {*} value\n   */\n  insert (key, value) {\n    this._root = this._insert(this._root, key, value);\n    this._size++;\n  }\n\n\n  _insert (root, key, value) {\n    if (root === null) return node(key, value);\n\n    var cmp = this._compare(key, root.key);\n    if (cmp < 0) {\n      root.left  = this._insert(root.left, key, value);\n    } else if (cmp > 0) { //allow repeating keys?\n      root.right = this._insert(root.right, key, value);\n    } else {\n      // It's a duplicate so insertion failed, decrement size to make up for it\n      this._size--;\n      return root;\n    }\n\n    // Update height and rebalance tree\n    root.height = Math.max(leftHeight(root), rightHeight(root)) + 1;\n    var balance = balanceFactor(root);\n\n    if (balance === UNBALANCED_LEFT) {\n      if (this._compare(key, root.left.key) < 0) { // left left\n        root = rotateRight(root);\n      } else { // Left right case\n        root.left = rotateLeft(root.left);\n        return rotateRight(root);\n      }\n    }\n\n    if (balance === UNBALANCED_RIGHT) {\n      if (this._compare(key, root.right.key) > 0) { // right right\n        root = rotateLeft(root);\n      } else { // Right left case\n        root.right = rotateRight(root.right);\n        return rotateLeft(root);\n      }\n    }\n\n    return root;\n  }\n\n\n  remove (key) {\n    this._root = this._remove(this._root, key);\n    this._size--;\n  }\n\n\n  /**\n   * @param  {node} root\n   * @param  {*}    key\n   * @return {node}\n   */\n  _remove (root, key) {\n    if (root === null) {  // BST deletion\n      this._size++;\n      return root;\n    }\n\n    var cmp = this._compare(key, root.key);\n    if (cmp < 0) {\n      // The key to be deleted is in the left sub-tree\n      root.left = this._remove(root.left, key);\n    } else if (cmp > 0) {\n      // The key to be deleted is in the right sub-tree\n      root.right = this._remove(root.right, key);\n    } else if (cmp === 0) {\n      // root is the node to be deleted\n      if (!root.left && !root.right)      root = null;\n      else if (!root.left && root.right)  root = root.right;\n      else if (root.left  && !root.right) root = root.left;\n      else {\n        // Node has 2 children, get the in-order successor\n        var successor = minNode(root.right);\n        root.key   = successor.key;\n        root.right = this._remove(root.right, successor.key);\n      }\n    }\n\n    if (root === null) return root;\n\n    // Update height and rebalance tree\n    root.height = Math.max(leftHeight(root), rightHeight(root)) + 1;\n    var balance = balanceFactor(root);\n\n    if (balance === UNBALANCED_LEFT) {\n      var leftBalance = balanceFactor(root.left);\n      // Left left case\n      if (leftBalance === 0 ||\n          leftBalance === SLIGHTLY_UNBALANCED_LEFT) {\n        return rotateRight(root);\n      }\n\n      // Left right case\n      if (leftBalance === SLIGHTLY_UNBALANCED_RIGHT) {\n        root.left = rotateLeft(root.left);\n        return rotateRight(root);\n      }\n    }\n\n    if (balance === UNBALANCED_RIGHT) {\n      var rightBalance = balanceFactor(root.right);\n      // Right right case\n      if (rightBalance === 0 ||\n          rightBalance === SLIGHTLY_UNBALANCED_RIGHT) {\n        return rotateLeft(root);\n      }\n      // Right left case\n      if (rightBalance === SLIGHTLY_UNBALANCED_LEFT) {\n        root.right = rotateRight(root.right);\n        return rotateLeft(root);\n      }\n    }\n\n    return root;\n  }\n\n\n  /**\n   * @param {*} key\n   * @return {node}\n   */\n  findNode (key) {\n    return this._findNode(this._root, key);\n  }\n\n\n  find (key) {\n    var node = this._findNode(this._root, key);\n    return node ? node.value : null;\n  }\n\n\n  /**\n   * @param  {node} root\n   * @param  {*}    key\n   * @return {node}\n   */\n  _findNode (root, key) {\n    if (this._root === null) return null;\n    if (key === root.key)    return root;\n\n\n    if (this._compare(key, root.key) < 0) {\n      if (!root.left) return null;\n      return this._findNode(root.left, key);\n    }\n\n    if (!root.right) return null;\n\n    return this._findNode(root.right, key);\n  }\n\n\n  /**\n   * @param  {*}\n   * @return {boolean}\n   */\n  contains (key) {\n    return this._root === null ? false : (this._findNode(this._root, key) !== null);\n  }\n\n\n  /**\n   * @return {*}\n   */\n  min () {\n    return minNode(this._root).key;\n  }\n\n\n  /**\n   * @return {*}\n   */\n  max () {\n    return maxNode(this._root).key;\n  }\n\n\n  pop () {\n    var min = this.min();\n    this._remove(this._root, min);\n    return min;\n  }\n\n\n  forEach(fn) {\n    var current = this._root;\n    var s = [], done = false;\n\n    while (!done) {\n      // Reach the left most Node of the current Node\n      if (current) {\n        // Place pointer to a tree node on the stack\n        // before traversing the node's left subtree\n        s.push(current);\n        current = current.left;\n      } else {\n        // BackTrack from the empty subtree and visit the Node\n        // at the top of the stack; however, if the stack is\n        // empty you are done\n        if (s.length > 0) {\n          current = s.pop();\n          fn(current);\n\n          // We have visited the node and its left\n          // subtree. Now, it's right subtree's turn\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return this;\n  }\n\n}\n\n\n/**\n * @param  {node} root\n * @return {node}\n */\nfunction minNode (root) {\n  var node = root;\n  while (node.left) node = node.left;\n  return node;\n}\n\n\n/**\n * @param  {node} root\n * @return {node}\n */\nfunction maxNode (root) {\n  var node = root;\n  while (node.right) node = node.right;\n  return node;\n}\n"],"names":["const","node"],"mappings":"AAEO,SAAS,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE;EAChC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAA,GAAG,EAAE,OAAA,KAAK,EAAE,CAAC;CAC9D;;;AAGD,AAAO,SAAS,UAAU,EAAE,IAAI,EAAE;EAChC,OAAO,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;CAC5C;;;AAGD,AAAO,SAAS,WAAW,EAAE,IAAI,EAAE;EACjC,OAAO,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;CAC1C;;;;;;;;;;;;AAYD,AAAO,SAAS,UAAU,EAAE,IAAI,EAAE;EAChC,IAAI,KAAK,MAAM,IAAI,CAAC,KAAK,CAAC;EAC1B,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,CAAC;EAC1B,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC;;EAEpB,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACjE,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;EAC7D,OAAO,KAAK,CAAC;CACd;;;;;;;;;;;;AAYD,AAAO,SAAS,WAAW,EAAE,IAAI,EAAE;EACjC,IAAI,KAAK,MAAM,IAAI,CAAC,IAAI,CAAC;EACzB,IAAI,CAAC,IAAI,MAAM,KAAK,CAAC,KAAK,CAAC;EAC3B,KAAK,CAAC,KAAK,IAAI,IAAI,CAAC;;EAEpB,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACjE,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;EAC5D,OAAO,KAAK,CAAC;CACd;;AC/CDA,IAAM,eAAe,aAAa,CAAC,CAAC,CAAC;AACrCA,IAAM,wBAAwB,IAAI,CAAC,CAAC,CAAC;AACrCA,IAAM,gBAAgB,aAAa,CAAC,CAAC;AACrCA,IAAM,yBAAyB,IAAI,CAAC,CAAC;;AAErCA,IAAM,eAAe,GAAG,UAAC,CAAC,EAAE,CAAC,EAAE,UAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAC,CAAC;;;;;;AAM/DA,IAAM,aAAa,GAAG,UAACC,OAAI,EAAE,SAAG,UAAU,CAACA,OAAI,CAAC,GAAG,WAAW,CAACA,OAAI,CAAC,GAAA,CAAC;;;AAGrE,IAAqB,GAAG,GAAC,YAEZ,EAAE,UAA4B,EAAE;yCAApB,GAAG,eAAe;;EACzC,IAAM,CAAC,KAAK,GAAG,IAAI,CAAC;EACpB,IAAM,CAAC,KAAK,GAAG,CAAC,CAAC;EACjB,IAAM,CAAC,QAAQ,GAAG,UAAU,CAAC;CAC5B;;kDAAA;;AAEH,mBAAE,IAAQ,oBAAK,EAAI,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE,CAAA;AACvC,mBAAE,OAAW,mBAAI,EAAE,OAAO,IAAI,CAAC,KAAK,KAAK,CAAC,CAAC,EAAE,CAAA;;;;;;AAM7C,cAAE,MAAM,oBAAE,GAAG,EAAE,KAAK,EAAE;EACpB,IAAM,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;EACpD,IAAM,CAAC,KAAK,EAAE,CAAC;CACd,CAAA;;;AAGH,cAAE,OAAO,qBAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE;EAC3B,IAAM,IAAI,KAAK,IAAI,EAAE,EAAA,OAAO,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,EAAA;;EAE7C,IAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;EACzC,IAAM,GAAG,GAAG,CAAC,EAAE;IACb,IAAM,CAAC,IAAI,EAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;GAClD,MAAM,IAAI,GAAG,GAAG,CAAC,EAAE;IACpB,IAAM,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;GACnD,MAAM;;IAEP,IAAM,CAAC,KAAK,EAAE,CAAC;IACf,OAAS,IAAI,CAAC;GACb;;;EAGH,IAAM,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EAClE,IAAM,OAAO,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;;EAEpC,IAAM,OAAO,KAAK,eAAe,EAAE;IACjC,IAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;MAC3C,IAAM,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;KAC1B,MAAM;MACP,IAAM,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;MACpC,OAAS,WAAW,CAAC,IAAI,CAAC,CAAC;KAC1B;GACF;;EAEH,IAAM,OAAO,KAAK,gBAAgB,EAAE;IAClC,IAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;MAC5C,IAAM,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;KACzB,MAAM;MACP,IAAM,CAAC,KAAK,GAAG,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;MACvC,OAAS,UAAU,CAAC,IAAI,CAAC,CAAC;KACzB;GACF;;EAEH,OAAS,IAAI,CAAC;CACb,CAAA;;;AAGH,cAAE,MAAM,oBAAE,GAAG,EAAE;EACb,IAAM,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;EAC7C,IAAM,CAAC,KAAK,EAAE,CAAC;CACd,CAAA;;;;;;;;AAQH,cAAE,OAAO,qBAAE,IAAI,EAAE,GAAG,EAAE;EACpB,IAAM,IAAI,KAAK,IAAI,EAAE;IACnB,IAAM,CAAC,KAAK,EAAE,CAAC;IACf,OAAS,IAAI,CAAC;GACb;;EAEH,IAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;EACzC,IAAM,GAAG,GAAG,CAAC,EAAE;;IAEb,IAAM,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;GAC1C,MAAM,IAAI,GAAG,GAAG,CAAC,EAAE;;IAEpB,IAAM,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;GAC5C,MAAM,IAAI,GAAG,KAAK,CAAC,EAAE;;IAEtB,IAAM,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,EAAE,IAAI,GAAG,IAAI,CAAC,EAAA;SAC3C,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,EAAA;SACjD,IAAI,IAAI,CAAC,IAAI,GAAK,CAAC,IAAI,CAAC,KAAK,EAAE,EAAA,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,EAAA;SAChD;;MAEL,IAAM,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;MACtC,IAAM,CAAC,GAAG,GAAK,SAAS,CAAC,GAAG,CAAC;MAC7B,IAAM,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC;KACtD;GACF;;EAEH,IAAM,IAAI,KAAK,IAAI,EAAE,EAAA,OAAO,IAAI,CAAC,EAAA;;;EAGjC,IAAM,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EAClE,IAAM,OAAO,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;;EAEpC,IAAM,OAAO,KAAK,eAAe,EAAE;IACjC,IAAM,WAAW,GAAG,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;IAE7C,IAAM,WAAW,KAAK,CAAC;QACnB,WAAa,KAAK,wBAAwB,EAAE;MAC9C,OAAS,WAAW,CAAC,IAAI,CAAC,CAAC;KAC1B;;;IAGH,IAAM,WAAW,KAAK,yBAAyB,EAAE;MAC/C,IAAM,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;MACpC,OAAS,WAAW,CAAC,IAAI,CAAC,CAAC;KAC1B;GACF;;EAEH,IAAM,OAAO,KAAK,gBAAgB,EAAE;IAClC,IAAM,YAAY,GAAG,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;IAE/C,IAAM,YAAY,KAAK,CAAC;QACpB,YAAc,KAAK,yBAAyB,EAAE;MAChD,OAAS,UAAU,CAAC,IAAI,CAAC,CAAC;KACzB;;IAEH,IAAM,YAAY,KAAK,wBAAwB,EAAE;MAC/C,IAAM,CAAC,KAAK,GAAG,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;MACvC,OAAS,UAAU,CAAC,IAAI,CAAC,CAAC;KACzB;GACF;;EAEH,OAAS,IAAI,CAAC;CACb,CAAA;;;;;;;AAOH,cAAE,QAAQ,sBAAE,GAAG,EAAE;EACf,OAAS,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;CACxC,CAAA;;;AAGH,cAAE,IAAI,kBAAE,GAAG,EAAE;EACX,IAAMA,OAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;EAC7C,OAASA,OAAI,GAAGA,OAAI,CAAC,KAAK,GAAG,IAAI,CAAC;CACjC,CAAA;;;;;;;;AAQH,cAAE,SAAS,uBAAE,IAAI,EAAE,GAAG,EAAE;EACtB,IAAM,IAAI,CAAC,KAAK,KAAK,IAAI,EAAE,EAAA,OAAO,IAAI,CAAC,EAAA;EACvC,IAAM,GAAG,KAAK,IAAI,CAAC,GAAG,GAAG,EAAE,OAAO,IAAI,CAAC,EAAA;;;EAGvC,IAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;IACtC,IAAM,CAAC,IAAI,CAAC,IAAI,EAAE,EAAA,OAAO,IAAI,CAAC,EAAA;IAC9B,OAAS,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;GACvC;;EAEH,IAAM,CAAC,IAAI,CAAC,KAAK,EAAE,EAAA,OAAO,IAAI,CAAC,EAAA;;EAE/B,OAAS,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;CACxC,CAAA;;;;;;;AAOH,cAAE,QAAQ,sBAAE,GAAG,EAAE;EACf,OAAS,IAAI,CAAC,KAAK,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,CAAC,CAAC;CACjF,CAAA;;;;;;AAMH,cAAE,GAAG,mBAAI;EACP,OAAS,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC;CAChC,CAAA;;;;;;AAMH,cAAE,GAAG,mBAAI;EACP,OAAS,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC;CAChC,CAAA;;;AAGH,cAAE,GAAG,mBAAI;EACP,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;EACvB,IAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;EAChC,OAAS,GAAG,CAAC;CACZ,CAAA;;;AAGH,cAAE,OAAO,qBAAC,EAAE,EAAE;EACZ,IAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC;EAC3B,IAAM,CAAC,GAAG,EAAE,EAAE,IAAI,GAAG,KAAK,CAAC;;EAE3B,OAAS,CAAC,IAAI,EAAE;;IAEd,IAAM,OAAO,EAAE;;;MAGb,CAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;MAClB,OAAS,GAAG,OAAO,CAAC,IAAI,CAAC;KACxB,MAAM;;;;MAIP,IAAM,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;QAClB,OAAS,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;QACpB,EAAI,CAAC,OAAO,CAAC,CAAC;;;;QAId,OAAS,GAAG,OAAO,CAAC,KAAK,CAAC;OACzB,MAAM,EAAA,IAAI,GAAG,IAAI,CAAC,EAAA;KACpB;GACF;EACH,OAAS,IAAI,CAAC;CACb,CAAA;;6DAEF;;;;;;AAOD,SAAS,OAAO,EAAE,IAAI,EAAE;EACtB,IAAIA,OAAI,GAAG,IAAI,CAAC;EAChB,OAAOA,OAAI,CAAC,IAAI,EAAE,EAAAA,OAAI,GAAGA,OAAI,CAAC,IAAI,CAAC,EAAA;EACnC,OAAOA,OAAI,CAAC;CACb;;;;;;;AAOD,SAAS,OAAO,EAAE,IAAI,EAAE;EACtB,IAAIA,OAAI,GAAG,IAAI,CAAC;EAChB,OAAOA,OAAI,CAAC,KAAK,EAAE,EAAAA,OAAI,GAAGA,OAAI,CAAC,KAAK,CAAC,EAAA;EACrC,OAAOA,OAAI,CAAC;CACb;;;;"}